
# ███╗   ███╗███████╗███████╗███████╗ █████╗  ██████╗ ███████╗
# ████╗ ████║██╔════╝██╔════╝██╔════╝██╔══██╗██╔════╝ ██╔════╝
# ██╔████╔██║█████╗  ███████╗███████╗███████║██║  ███╗█████╗
# ██║╚██╔╝██║██╔══╝  ╚════██║╚════██║██╔══██║██║   ██║██╔══╝
# ██║ ╚═╝ ██║███████╗███████║███████║██║  ██║╚██████╔╝███████╗
# ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝ ╚═════╝ ╚══════╝
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# <type>[optional scope]: <description>
#
# [optional body]
#
# [optional footer(s)]
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Type:
# `feat:` A new feature (MINOR in Semantic Versioning).
# `fix:` A bug fix (PATCH in Semantic Versioning).
# `docs:` Documentation only changes.
# `style:` Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc).
# `refactor:` A code change that neither fixes a bug nor adds a feature.
# `perf:` A code change that improves performance.
# `test:` Adding missing or correcting existing tests.
# `chore:` Changes to the build process or auxiliary tools and libraries such as documentation generation.
# `ci:` Changes to the continuous integration.
# `build:` Changes to the build process or code generation.

# Scope:
# A scope may be provided to a commit’s type, to provide additional contextual information and is contained within parenthesis.

# Breaking Change:
# A commit that has a footer `BREAKING CHANGE: <description>`, or a `!` after the type/scope (MAJOR in Semantic Versioning).

# @see https://www.conventionalcommits.org
# @see https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
